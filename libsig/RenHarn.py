from libsig.primes import gen_prime, is_safe_prime
from libsig.secrets import randrange
from gmpy2 import invert, gcd
from hashlib import sha256


class RenHarn:
    @staticmethod
    def keygen(size=1024):
        """returns a (public, private, generator, prime)-keypair."""
        raise NotImplementedError

    @staticmethod
    def ringsign(privkey, pubkeys, message):
        """returns a signature. The privkey is the private key
        generated by keygen. pubkeys is an array of the public keys in
        the ring, including the pubkeys corresponding to privkey. The
        message is an array of bytes.
        """
        raise NotImplementedError

    @staticmethod
    def verify(pubkeys, message, signature):
        """returns True iff the signature is correct."""
        raise NotImplementedError


class ElGamal:
    @staticmethod
    def keygen(size=1024):
        """returns a (public, private, generator, prime)-keypair."""
        p = gen_prime(size, extra_check=is_safe_prime)
        q = p//2
        while 1:
            g = randrange(3, p)
            if pow(g, 2, p) == 1:
                continue
            if pow(g, q, p) == 1:
                continue
            if divmod(p-1, g)[1] == 0:
                continue
            if divmod(p - 1, invert(g, p))[1] == 0:
                continue
            break
        d = randrange(2, p - 1)
        e = pow(g, d, p)
        return {'e': e, 'd': d, 'g': g, 'p': p}

    @staticmethod
    def sign(d, message, g, p):
        """returns a signature. The privkey is the private key
        generated by keygen. The message is an array of bytes.
        """
        m = int(sha256(message).hexdigest(), 16)
        l = randrange(2, p - 1)
        while gcd(l, p - 1) != 1:
            l = randrange(2, p - 1)
        α = pow(g, l, p)
        β = (m - d*α)*invert(l, p - 1) % (p - 1)
        return α, β

    @staticmethod
    def verify(e, message, signature, g, p):
        """returns True iff the signature is correct."""
        α, β = signature
        if α < 1 or α >= p:
            return False
        m = int(sha256(message).hexdigest(), 16)
        return pow(g, m) == pow(e, α, p)*pow(e, α, p) % p
